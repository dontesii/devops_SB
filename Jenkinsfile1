pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        SUDO_PASS = credentials('PRIVATE')
    }
    stages {
        stage('Terraform apply') {
            steps {
                git branch: 'Task173', credentialsId: 'jenkins_ssh_key', url: 'git@github.com:dontesii/devops_SB.git'
                dir('Task173') {
                string LB_IP = sh(returnStdout: true, script: "terraform output lb_server_ip").trim()
                string LB_DNS_NAME = sh(returnStdout: true, script: "terraform output lb_server_dns_name").trim()
                string DB_IP = sh(returnStdout: true, script: "terraform output db_server_ip").trim()
                string DB_DNS_NAME = sh(returnStdout: true, script: "terraform output db_server_dns_name").trim()
                string APP_IP = sh(returnStdout: true, script: "terraform output app_server_ip").trim()
                string APP_DNS_NAME = sh(returnStdout: true, script: "terraform output app_server_dns_name").trim()
                }
            }

            post {
                success {
                    sh 'echo "Terraform apply: all fine"'
                }
                failure {
                    sh 'echo "Terraform apply: fail"'
                }
            }
        }
        
        
        stage('Test the setup') {
            parallel {
                
                stage('Test LB server') {
                    steps {
                        script {

                            sh(script: "nmap ${LB_IP} -p 80 | grep -o open", returnStdout: true)
                        }
                    }
                }

                stage('Test DB server') {
                    steps {
                        script {
                            sh(script: "nmap ${DB_IP} -p 3306 | grep -o open", returnStdout: true)
                            
                        }
                    }
                }

                stage('Test APP server') {
                    steps {
                        script {
                            sh(script: "nmap ${APP_IP} -p 8000 | grep -o open", returnStdout: true)
                        }
                    }
                }
            }
        }

        stage('Test the application') {
            parallel {

                stage('Test index.html') {
                    steps {
                        script {
                            string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME} \
                                -o /dev/null", returnStdout: true).trim()
                                
                            if (status != "200") {
                                error("index.html error")
                            }
                        }
                    }
                }

                stage('Test dbread') {
                    steps {
                        script {
                            string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/dbread \
                                -o /dev/null", returnStdout: true).trim()
                                
                            if (status != "200") {
                                error("dbread error")
                            }
                        }
                    }
                }

                stage('Test appserver') {
                    steps {
                        script {
                            string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/appserver \
                                -o /dev/null", returnStdout: true).trim()
                                
                            if (status != "200") {
                                error("appserver error")
                            }
                        }
                    }
                }

                stage('Test serverid') {
                    steps {
                        script {
                            string status = sh(script: "curl -sLI -w '%{http_code}' http://${LB_DNS_NAME}/serverid \
                                -o /dev/null", returnStdout: true).trim()
                                
                            if (status != "200") {
                                error("serverid error")
                            }
                        }
                    }
                }
            }
        }

    }
}