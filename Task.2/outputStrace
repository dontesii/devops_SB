Output strace ls

admon@pop-os:/var/log/journal/8d6b7c81b04c75994e86045362a71b27$ strace ls
execve("/usr/bin/ls", ["ls"], 0x7ffe66e64a50 /* 56 vars */) = 0    #library call to load and run a new executable
brk(NULL)                               = 0x55e571d09000            #change where the program stops, which determines the end of the process data segment
arch_prctl(0x3001 /* ARCH_??? */, 0x7ffe613ca230) = -1 EINVAL (Недопустимый аргумент) #The call to arch_prctl is only needed when you want to set bases that are larger than 4GB/code is not a valid subfunction code.
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f41449db000 #creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (Нет такого файла или каталога)  #file access ld.so.preload
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3                #The open at() system call returns a new file descriptor.
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=68305, ...}, AT_EMPTY_PATH) = 0 #lower system call
mmap(NULL, 68305, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f41449ca000##creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
close(3)                                = 0#closes a file descriptor, so that it no longer refers to any file and may be reused
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3#The open at() system call returns a new file descriptor.
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832 #!!read
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=166280, ...}, AT_EMPTY_PATH) = 0#lower system call
mmap(NULL, 177672, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f414499e000#creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
mprotect(0x7f41449a4000, 139264, PROT_NONE) = 0#creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
mmap(0x7f41449a4000, 106496, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6000) = 0x7f41449a4000#
mmap(0x7f41449be000, 28672, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x20000) = 0x7f41449be000#
mmap(0x7f41449c6000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x27000) = 0x7f41449c6000#
mmap(0x7f41449c8000, 5640, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f41449c8000#
close(3)                                = 0#closes a file descriptor, so that it no longer refers to any file and may be reused
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3#The open at() system call returns a new file descriptor.
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0"..., 832) = 832#read
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784 #reads up to count bytes from file descriptor fd at offset offset (from the start of the file) into the buffer starting at buf.
pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0"..., 48, 848) = 48#reads up to count bytes from file descriptor fd at offset offset (from the start of the file) into the buffer starting at buf.
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\211\303\313\205\371\345PFwdq\376\320^\304A"..., 68, 896) = 68#reads up to count bytes from file descriptor fd at offset offset (from the start of the file) into the buffer starting at buf.
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2216304, ...}, AT_EMPTY_PATH) = 0#lower system call
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784#reads up to count bytes from file descriptor fd at offset offset (from the start of the file) into the buffer starting at buf.
mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f4144776000##creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
mmap(0x7f414479e000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f414479e000#
mmap(0x7f4144933000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f4144933000#
mmap(0x7f414498b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f414498b000#
mmap(0x7f4144991000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f4144991000#
close(3)                                = 0#closes a file descriptor, so that it no longer refers to any file and may be reused
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libpcre2-8.so.0", O_RDONLY|O_CLOEXEC) = 3#The open at() system call returns a new file descriptor.
read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=613064, ...}, AT_EMPTY_PATH) = 0#lower system call
mmap(NULL, 615184, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f41446df000#
mmap(0x7f41446e1000, 438272, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7f41446e1000#
mmap(0x7f414474c000, 163840, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6d000) = 0x7f414474c000#
mmap(0x7f4144774000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x94000) = 0x7f4144774000#
close(3)                                = 0
mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f41446dc000##creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
arch_prctl(ARCH_SET_FS, 0x7f41446dc800) = 0#The call to arch_prctl is only needed when you want to set bases that are larger than 4GB/code is not a valid subfunction code.
set_tid_address(0x7f41446dcad0)         = 119450#set pointer to thread ID
set_robust_list(0x7f41446dcae0, 24)     = 0# system call requests the kernel to record the head of the list of robust futexes owned by the calling thread. 
#The head argument is the list head to record. The len argument should be sizeof(*head).
rseq(0x7f41446dd1a0, 0x20, 0, 0x53053053) = 0 #changes the access protections for the calling
#process's memory pages containing any part of the address range
mprotect(0x7f414498b000, 16384, PROT_READ) = 0#changes the access protections for the calling
#process's memory pages containing any part of the address range
mprotect(0x7f4144774000, 4096, PROT_READ) = 0#changes the access protections for the calling
#process's memory pages containing any part of the address range
mprotect(0x7f41449c6000, 4096, PROT_READ) = 0#changes the access protections for the calling
#process's memory pages containing any part of the address range
mprotect(0x55e571c8b000, 4096, PROT_READ) = 0#changes the access protections for the calling
#process's memory pages containing any part of the address range
mprotect(0x7f4144a15000, 8192, PROT_READ) = 0#changes the access protections for the calling
#process's memory pages containing any part of the address range
prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0 #get/set resource limits
munmap(0x7f41449ca000, 68305)           = 0#creates a new mapping in the virtual address space of the calling process.
statfs("/sys/fs/selinux", 0x7ffe613ca270) = -1 ENOENT (Нет такого файла или каталога)#returns information about a mounted file system
statfs("/selinux", 0x7ffe613ca270)      = -1 ENOENT (Нет такого файла или каталога)#returns information about a mounted file system
getrandom("\x6f\x73\x9e\xc0\x7a\xba\x85\xa2", 8, GRND_NONBLOCK) = 8#
brk(NULL)                               = 0x55e571d09000#
brk(0x55e571d2a000)                     = 0x55e571d2a000#
openat(AT_FDCWD, "/proc/filesystems", O_RDONLY|O_CLOEXEC) = 3#The open at() system call returns a new file descriptor.
newfstatat(3, "", {st_mode=S_IFREG|0444, st_size=0, ...}, AT_EMPTY_PATH) = 0#lower system call
read(3, "nodev\tsysfs\nnodev\ttmpfs\nnodev\tbd"..., 1024) = 424#
read(3, "", 1024)                       = 0#attempts to read up to count bytes from file descriptor
close(3)                                = 0#closes a file descriptor, so that it no longer refers to any file and may be reused
access("/etc/selinux/config", F_OK)     = -1 ENOENT (Нет такого файла или каталога)#file access 
openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3#The open at() system call returns a new file descriptor.
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=15752576, ...}, AT_EMPTY_PATH) = 0#lower system call
mmap(NULL, 15752576, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f41437d6000#creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
close(3)                                = 0
ioctl(1, TCGETS, {B38400 opost isig icanon echo ...}) = 0#function manipulates the underlying device parameters of special files
ioctl(1, TIOCGWINSZ, {ws_row=24, ws_col=104, ws_xpixel=0, ws_ypixel=0}) = 0#function manipulates the underlying device parameters of special files
openat(AT_FDCWD, ".", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = 3#The open at() system call returns a new file descriptor.
newfstatat(3, "", {st_mode=S_IFDIR|S_ISGID|0755, st_size=4096, ...}, AT_EMPTY_PATH) = 0#lower system call
getdents64(3, 0x55e571d10ab0 /* 8 entries */, 32768) = 544#reads several linux_dirent structures from the directory referred to by the open file descriptor fd into the buffer pointed to by dirp
openat(AT_FDCWD, "/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache", O_RDONLY) = 4#The open at() system call returns a new file descriptor.
newfstatat(4, "", {st_mode=S_IFREG|0644, st_size=27002, ...}, AT_EMPTY_PATH) = 0#lower system call
mmap(NULL, 27002, PROT_READ, MAP_SHARED, 4, 0) = 0x7f41449d4000#creates a new mapping in the virtual address space of the
  #     calling process PROT_READ — pages can be read PROT_WRITE - pages can be written
close(4)                                = 0
futex(0x7f4144990a6c, FUTEX_WAKE_PRIVATE, 2147483647) = 0#system call provides a method for a program to wait for a value at a given address to change, and a method to wake up anyone waiting on a particular address
getdents64(3, 0x55e571d10ab0 /* 0 entries */, 32768) = 0#reads several linux_dirent structures from the directory referred to by the open file descriptor fd into the buffer pointed to by dirp
close(3)                                = 0
newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x1), ...}, AT_EMPTY_PATH) = 0#lower system call
write(1, "system@d15fb88a819842d4af0709e2a"..., 82system@d15fb88a819842d4af0709e2a5d9b37c-0000000000000001-0005e1525d4e4037.journal
) = 82#writes up to counting bytes from the buffer pointed to by buf to the file referenced by the file descriptor fd
write(1, "system@d15fb88a819842d4af0709e2a"..., 82system@d15fb88a819842d4af0709e2a5d9b37c-0000000000014716-0005e1dd465b1432.journal
) = 82#writes up to counting bytes from the buffer pointed to by buf to the file referenced by the file descriptor fd
write(1, "system.journal\n", 15 system.journal
) = 15# writes up to counting bytes from the buffer pointed to by buf to the file referenced by the file descriptor fd
write(1, "user-1000@d9ea745e235d40e8bd4d39"..., 85user-1000@d9ea745e235d40e8bd4d394ee1cecf3e-0000000000000898-0005e1525e64e5c6.journal
) = 85
write(1, "user-1000@d9ea745e235d40e8bd4d39"..., 85user-1000@d9ea745e235d40e8bd4d394ee1cecf3e-0000000000014718-0005e1dd468102e2.journal
) = 85
write(1, "user-1000.journal\n", 18user-1000.journal
)     = 18
close(1)                                = 0
close(2)                                = 0
exit_group(0)                           = ?
+++ exited with 0 +++
